{"version":3,"sources":["components/SearchTodo/Input/Input.js","components/SearchTodo/Select/Select.js","components/SearchTodo/SearchTodo.js","components/TodoShape/TodoShape.js","components/Todo/Todo.js","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Input","handleChange","search","type","className","placeholder","name","value","onChange","Select","visibleTodos","React","memo","PropTypes","number","string","bool","Todo","completed","title","userId","selectedUserId","selectUser","checked","readOnly","classNames","onClick","TodoList","state","e","target","setState","filterBySelect","todo","status","this","props","todos","hasError","hasLoading","role","filteredTodos","filter","includes","map","key","id","PureComponent","defaultProps","getUser","fetch","then","response","ok","Error","statusText","json","CurrentUser","user","isError","isLoading","loadUser","prevProps","prevState","data","clear","email","phone","App","clearSelectedUser","todosData","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd536f44.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Input = ({ handleChange, search }) => (\n  <label>\n    Search todo\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      placeholder=\"Search...\"\n      name=\"search\"\n      value={search}\n      onChange={handleChange}\n    />\n  </label>\n);\n\nInput.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  search: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Select = ({ handleChange, visibleTodos }) => (\n  <label>\n    <select\n      name=\"visibleTodos\"\n      value={visibleTodos}\n      className=\"form-control\"\n      onChange={handleChange}\n    >\n      <option value=\"All\">All</option>\n      <option value=\"Completed\">Completed</option>\n      <option value=\"Active\">Active</option>\n    </select>\n  </label>\n);\n\nSelect.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  visibleTodos: PropTypes.string.isRequired,\n};\n\nexport default Select;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from './Input/Input';\nimport Select from './Select/Select';\n\nconst SearchTodo = ({ handleChange, search, visibleTodos }) => (\n  <div className=\"form-group\">\n    <Input\n      handleChange={handleChange}\n      search={search}\n    />\n    <Select\n      handleChange={handleChange}\n      visibleTodos={visibleTodos}\n    />\n  </div>\n);\n\nSearchTodo.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  search: PropTypes.string.isRequired,\n  visibleTodos: PropTypes.string.isRequired,\n};\n\nexport default React.memo(SearchTodo);\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = {\n  id: PropTypes.number,\n  userId: PropTypes.number,\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n  createAt: PropTypes.string,\n  updatedAt: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Todo = ({ completed, title, userId, selectedUserId, selectUser }) => (\n  <>\n    <label>\n      <input type=\"checkbox\" checked={completed} readOnly />\n      <p>{title}</p>\n    </label>\n\n    <button\n      className={classNames(\n        'TodoList__user-button',\n        'button',\n        {\n          // eslint-disable-next-line max-len\n          'TodoList__user-button--selected': userId === selectedUserId,\n        },\n      )}\n      type=\"button\"\n      onClick={() => selectUser((userId))}\n    >\n      {`User #${userId}`}\n    </button>\n  </>\n);\n\nTodo.propTypes = {\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport SearchTodo from '../SearchTodo/SearchTodo';\nimport { TodoShape } from '../TodoShape/TodoShape';\nimport Todo from '../Todo/Todo';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    visibleTodos: 'All',\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterBySelect = (todo, status) => {\n    if (status === 'Completed') {\n      return todo.completed;\n    }\n\n    if (status === 'Active') {\n      return !todo.completed;\n    }\n\n    return true;\n  };\n\n  render() {\n    const {\n      todos,\n      selectUser,\n      selectedUserId,\n      hasError,\n      hasLoading,\n    } = this.props;\n    const { search, visibleTodos } = this.state;\n\n    if (hasLoading) {\n      return (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      );\n    }\n\n    if (hasError) {\n      return (\n        <div>\n          <h1>Server has problem</h1>\n        </div>\n      );\n    }\n\n    const filteredTodos = todos.filter(todo => todo.title.includes(search)\n      && this.filterBySelect(todo, visibleTodos));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <SearchTodo\n            todos={todos}\n            handleChange={this.handleChange}\n            search={search}\n            visibleTodos={visibleTodos}\n          />\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  `TodoList__item ${todo.completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked'}`\n                }\n              >\n                <Todo\n                  {...todo}\n                  selectedUserId={selectedUserId}\n                  selectUser={selectUser}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape(TodoShape)),\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  hasLoading: PropTypes.bool.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const API_TODO = `https://mate-api.herokuapp.com/todos`;\nconst API_USER = `https://mate-api.herokuapp.com/users/`;\n\nexport const getTodos = () => fetch(API_TODO).then((response) => {\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n});\n\nexport const getUser = id => (\n  fetch(`${API_USER}${id}`).then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  }));\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n    isError: false,\n    isLoading: false,\n  }\n\n  componentDidMount() {\n    this.loadUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser(this.props.userId);\n    }\n  }\n\n  async loadUser(id) {\n    this.setState({ isLoading: true });\n    try {\n      const user = await getUser(id);\n\n      this.setState({\n        user: user.data,\n        isError: false,\n        isLoading: false,\n      });\n    } catch (error) {\n      this.setState({ isError: true });\n    }\n  }\n\n  render() {\n    const { isError, user, isLoading } = this.state;\n    const { clear } = this.props;\n\n    if (isError) {\n      return (\n        <div>\n          <p className=\"CurrentUser__email\">Server has problem</p>\n        </div>\n      );\n    }\n\n    if (isLoading) {\n      return (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={clear}\n        >\n          Clear\n        </button>\n        {!user\n          ? (\n            <h2 className=\"CurrentUser__title\">\n              <span>User not found</span>\n            </h2>\n          )\n          : (\n            <div>\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    hasError: false,\n    hasLoading: false,\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    this.setState({ hasLoading: true });\n    try {\n      const todos = await getTodos()\n        .then(todosData => todosData.data\n          .filter(todo => todo.id\n            && todo.userId\n            && todo.title\n            && todo.completed !== null));\n\n      this.setState({\n        todos,\n        hasError: false,\n        hasLoading: false,\n      });\n    } catch (error) {\n      this.setState({\n        hasError: true,\n        hasLoading: false,\n      });\n    }\n  }\n\n  selectUser = (id) => {\n    if (this.state.selectedUserId !== id) {\n      this.setState({\n        selectedUserId: id,\n      });\n    }\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, hasError, hasLoading } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            hasError={hasError}\n            hasLoading={hasLoading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}