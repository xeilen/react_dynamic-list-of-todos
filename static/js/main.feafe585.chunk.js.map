{"version":3,"sources":["components/SearchTodo/SearchTodo.js","components/TodoList/TodoList.jsx","components/TodoShape/TodoShape.js","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["React","memo","handleChange","search","visibleTodos","className","type","placeholder","name","value","onChange","TodoList","PropTypes","number","string","bool","state","e","target","setState","filterBySelect","todo","status","completed","this","props","todos","selectUser","selectedUserId","isError","isLoading","role","filteredTodos","filter","title","includes","map","key","id","checked","readOnly","classNames","userId","onClick","PureComponent","defaultProps","getUser","fetch","then","response","ok","Error","statusText","json","CurrentUser","user","loadUser","prevProps","prevState","data","clear","email","phone","App","clearSelectedUser","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.feafe585.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchTodo = ({ handleChange, search, visibleTodos }) => (\n  <div className=\"form-group\">\n    <label>\n      Search todo\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Search...\"\n        name=\"search\"\n        value={search}\n        onChange={handleChange}\n      />\n    </label>\n    <label>\n      <select\n        name=\"visibleTodos\"\n        value={visibleTodos}\n        className=\"form-control\"\n        onChange={handleChange}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Completed\">Completed</option>\n        <option value=\"Active\">Active</option>\n      </select>\n    </label>\n\n  </div>\n);\n\nSearchTodo.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  search: PropTypes.string.isRequired,\n  visibleTodos: PropTypes.string.isRequired,\n};\n\nexport default React.memo(SearchTodo);\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SearchTodo from '../SearchTodo/SearchTodo';\nimport { TodoShape } from '../TodoShape/TodoShape';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    visibleTodos: 'All',\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterBySelect = (todo, status) => {\n    if (status === 'Completed') {\n      return todo.completed;\n    }\n\n    if (status === 'Active') {\n      return !todo.completed;\n    }\n\n    return true;\n  };\n\n  render() {\n    const {\n      todos,\n      selectUser,\n      selectedUserId,\n      isError,\n      isLoading,\n    } = this.props;\n    const { search, visibleTodos } = this.state;\n\n    if (isLoading) {\n      return (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      );\n    }\n\n    if (isError) {\n      return (\n        <div>\n          <h1>Server has problem</h1>\n        </div>\n      );\n    }\n\n    const filteredTodos = todos.filter(todo => todo.title.includes(search)\n      && this.filterBySelect(todo, visibleTodos));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <SearchTodo\n            todos={todos}\n            handleChange={this.handleChange}\n            search={search}\n            visibleTodos={visibleTodos}\n          />\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  `TodoList__item ${todo.completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked'}`\n                }\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      // eslint-disable-next-line max-len\n                      'TodoList__user-button--selected': todo.userId === selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUser((todo.userId))}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape(TodoShape)),\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  isError: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = {\n  id: PropTypes.number,\n  userId: PropTypes.number,\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n  createAt: PropTypes.string,\n  updatedAt: PropTypes.string,\n};\n","const API_TODO = `https://mate-api.herokuapp.com/todos`;\nconst API_USER = `https://mate-api.herokuapp.com/users/`;\n\nexport const getTodos = () => fetch(API_TODO).then((response) => {\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n});\n\nexport const getUser = id => (\n  fetch(`${API_USER}${id}`).then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  }));\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n    isError: false,\n    isLoading: false,\n  }\n\n  componentDidMount() {\n    this.loadUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser(this.props.userId);\n    }\n  }\n\n  async loadUser(id) {\n    this.setState({ isLoading: true });\n    try {\n      const user = await getUser(id);\n\n      this.setState({\n        user: user.data,\n        isError: false,\n        isLoading: false,\n      });\n    } catch (error) {\n      this.setState({ isError: true });\n    }\n  }\n\n  render() {\n    const { isError, user, isLoading } = this.state;\n    const { clear } = this.props;\n\n    if (isError) {\n      return (\n        <div>\n          <p className=\"CurrentUser__email\">Server has problem</p>\n        </div>\n      );\n    }\n\n    if (isLoading) {\n      return (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={clear}\n        >\n          Clear\n        </button>\n        {!user\n          ? (\n            <h2 className=\"CurrentUser__title\">\n              <span>User not found</span>\n            </h2>\n          )\n          : (\n            <div>\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    isError: false,\n    isLoading: false,\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    this.setState({ isLoading: true });\n    try {\n      const todos = await getTodos();\n\n      this.setState({\n        todos: todos.data,\n        isError: false,\n        isLoading: false,\n      });\n    } catch (error) {\n      this.setState({\n        isError: true,\n        isLoading: false,\n      });\n    }\n  }\n\n  selectUser = (id) => {\n    if (this.state.selectedUserId !== id) {\n      this.setState({\n        selectedUserId: id,\n      });\n    }\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, isError, isLoading } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            isError={isError}\n            isLoading={isLoading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}